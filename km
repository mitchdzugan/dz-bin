#!/usr/bin/env node

const { spawn } = require('child_process');
const fs = require('fs');
const readline = require('readline');
const ks = require('keysym');
const keyOnSelf = (...args) => {
    const res = {};
    args.forEach((k) => { res[k] = k; });
    return res;
};

const MOD_SYM = {
    c: "⌃",
    a: "⎇",
    s: "⇧",
    m: "❖",
}

const NAME_OVERRIDES = {
}

const CMD = (
    keyOnSelf('noop', 'title', 'col', 'cmd', 'sub_begin', 'sub_done', 'done')
);

const crlfDelay = Infinity;
const streamLines = (input) => readline.createInterface({ input, crlfDelay });
const fileLines = (file) => streamLines(fs.createReadStream(file));

const parseBashOutLine = (line) => {
    try {
        return JSON.parse(line);
    } catch (e) {
        console.error(e);
        return { cmd: CMD.noop };
    }
};

class Entry {
    constructor(keyspec, desc) {
        const specParts = keyspec.split(':');
        const hasMod = specParts.length > 1;
        const modspec = hasMod ? specParts[0] : '';
        const finspec = (hasMod ? specParts[1] : specParts[0]).toLowerCase();
        const { baseMods, finkey } = NAME_OVERRIDES[finspec] || {
            baseMods: {}, finkey: finspec
        };
        for (const k in modspec) { baseMods[k] = true; }
        const modstring = (
            (baseMods.s ? 's' : '') +
            (baseMods.c ? 'c' : '') +
            (baseMods.a ? 'a' : '') +
            (baseMods.m ? 'm' : '')
        );
        this.keyspec = `${modstring}:${finkey}`;
        this.desc = desc;
    }
}

class CmdEntry extends Entry {
    constructor(keyspec, desc, exe) {
        super(keyspec, desc);
        this.exe = exe;
    }

    handle(kmApp) {
        kmApp.spawnAndClose(this.exe);
    }
}

class SubEntry extends Entry {
    constructor(keyspec, desc, menuId) {
        super(keyspec, desc);
        this.menuId = menuId;
    }

    handle(kmApp) {
        kmApp.activeMenuId = this.menuId;
    }
}

class Menu {
    constructor(kmApp, parentMenuId) {
        this.kmApp = kmApp;
        this.parentMenuId = parentMenuId;
        this.title = "";
        this.cols = [];
        this.entries = [];
        this.binds = {};
    }

    get parent() { return this.kmApp.menus[this.parentMenuId]; }

    get parentFullTitle() { return this.parent ? this.parent.fullTitle : []; }

    get fullTitle() {
        return [...this.parentFullTitle, this.title];
    }

    addEntry(entry) {
        this.entries.push(entry);
        this.binds[entry.keyspec] = entry;
    }

    addCmd(...args) { this.addEntry(new CmdEntry(...args)); }
    addSub(...args) { this.addEntry(new SubEntry(...args)); }
}

class KeyMenuApp {
    constructor(kmFiles) {
        this.kmFiles = kmFiles;
    }

    async run() {
        this.zkgProc = spawn('/home/dz/Projects/zkg/zkg');
        this.zkgProc.on('close', () => {
            if (!this.foundExe) { process.exit(1); }
        });
        this.bashProc = spawn('bash');
        this.foundExe = false;
        this.isMenuBuildComplete = false;
        this.queuedZkgEvents = [];
        this.nextMenuId = 1;
        this.menus = {};
        this.rootMenuId = this.initNewMenu();
        this.buildingMenuId = this.rootMenuId;
        this.activeMenuId = this.rootMenuId;
        this.processZkgOut();
        this.processBashErr();
        this.processBashOut();
        this.bashProc.stdin.write(`. ${__dirname}/km_lib\n`);
        for (const kmFile of this.kmFiles) {
            for await (const line of fileLines(kmFile)) {
                this.bashProc.stdin.write(line + '\n');
            }
        }
        this.bashProc.stdin.write('jq -c -n \'{cmd:"done",args:[]}\'\n');
    }

    get buildingMenu() { return this.menus[this.buildingMenuId]; }
    get activeMenu() { return this.menus[this.activeMenuId]; }

    initNewMenu(parentMenuId) {
        const id = this.nextMenuId++;
        const menu = new Menu(this, parentMenuId);
        this.menus[id] = menu;
        return id;
    }

    async processBashOut() {
        for await (const line of streamLines(this.bashProc.stdout)) {
            const action = parseBashOutLine(line);
            this.processAction(action);
        }
    }

    async processBashErr() {
        for await (const line of streamLines(this.bashProc.stderr)) {
            console.error('-- from bash subprocess --');
            console.error(line);
            console.error('--------------------------');
        }
    }

    processZkgEvent(zkgLine) {
        if (this.foundExe) { return; }
        const [keysymVal, eventType, activeModifiers] = zkgLine.split(' ');
        const modval = parseInt(activeModifiers);
        const hasShift = (modval & 1) > 0;
        const hasCtrl = (modval & 4) > 0;
        const hasAlt = (modval & 8) > 0;
        const hasMeta = (modval & 64) > 0;
        this.modstring = (
            (hasShift ? 's' : '') +
            (hasCtrl ? 'c' : '') +
            (hasAlt ? 'a' : '') +
            (hasMeta ? 'm' : '')
        );
        const keyspecs = ks.fromKeysym(keysymVal).names.map((name) => (
            `${this.modstring}:${name.toLowerCase()}`
        ));
        const isPress =  eventType === 'press';
        if (isPress) {
            for (const keyspec of keyspecs) {
                const entry = this.activeMenu.binds[keyspec];
                if (!entry) { continue; }
                entry.handle(this);
                break;
            }
        }
        this.render();
    }

    async processZkgOut() {
        for await (const line of streamLines(this.zkgProc.stdout)) {
            if (!this.isMenuBuildComplete) {
                this.queuedZkgEvents.push(line);
            } else {
                this.processZkgEvent(line);
            }
        }
    }

    async render() {
        const titleBox = {
            node: 'box',
            options: { dir: 'h', margin: 'auto' },
            children: [],
        };
        for (let i=0; i < this.activeMenu.fullTitle.length; i++) {
            const isLast = i === (this.activeMenu.fullTitle.length - 1);
            const piece = this.activeMenu.fullTitle[i];
            titleBox.children.push({
                node: 'text',
                options: { bold: isLast, color: 'magenta' },
                value: piece,
            });
            if (!isLast) {
                titleBox.children.push({
                    node: 'text',
                    options: { color: 'grey' },
                    value: ' > ',
                });
            }
        }
        const columnsBox = {
            node: 'box',
            options: { dir: 'h', use: 'equal' },
            children: [],
        };
        let col;
        const addCol = () => {
            columnsBox.children.push({
                node: 'box',
                options: { dir: 'v', center: true },
                children: [],
            });
            col = columnsBox.children[columnsBox.children.length - 1];
        }
        addCol();
        
        const menuBox = {
            node: 'box',
            options: { dir: 'v' },
            children: [titleBox, columnsBox],
        };
        console.log(menuBox);
    }

    processAction({ cmd, args }) {
        if (!CMD[cmd]) {
            console.error(`Unknown command [${cmd}]`);
            console.error('\t', cmd, ...args);
            return;
        }
        (({
            [CMD.noop]: () => {},
            [CMD.title]: (title) => {
                this.buildingMenu.title = title;
            },
            [CMD.col]: () => {
                this.buildingMenu.cols.push(this.buildingMenu.entries.length);
            },
            [CMD.cmd]: (keyspec, desc, exe) => {
                this.buildingMenu.addCmd(keyspec, desc, exe);
            },
            [CMD.sub_begin]: (keyspec, desc) => {
                const subId = this.initNewMenu(this.buildingMenuId);
                this.buildingMenu.addSub(keyspec, desc, subId);
                this.buildingMenuId = subId;
                this.buildingMenu.title = desc;
            },
            [CMD.sub_done]: () => {
                this.buildingMenuId = this.buildingMenu.parentMenuId;
            },
            [CMD.done]: () => {
                this.isMenuBuildComplete = true;
                this.render();
                for (const zkgLine of this.queuedZkgEvents) {
                    this.processZkgEvent(zkgLine);
                }
                this.queuedZkgEvents = [];
            },
        })[cmd])(...args);
    }

    spawnAndClose(exe) {
        this.foundExe = true;
        this.bashProc.kill();
        this.zkgProc.stdin.write('\n');
        spawn('bash', ['-lc', exe], { detached: true });
    }
}

const main = async() => {
    const app = new KeyMenuApp(process.argv.slice(2));
    await app.run();
};

main();