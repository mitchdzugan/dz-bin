#!/usr/bin/env node

const { spawn } = require('child_process');
const fs = require('fs');
const readline = require('readline');
const ks = require('keysym');
const keyOnSelf = (...args) => {
    const res = {};
    args.forEach((k) => { res[k] = k; });
    return res;
};

const MOD_SYM = {
    c: "⌃",
    a: "⎇",
    s: "⇧",
    m: "❖",
}

const DISPLAY_NAMES = {
    left: '⇦',
    up: '⇧',
    right: '⇨',
    down: '⇩',
    tab: "⭾",
    return: "⏎"
};

const NAME_OVERRIDES = {
};

const CMD = (
    keyOnSelf('noop', 'title', 'col', 'cmd', 'sub_begin', 'sub_done', 'done')
);

const crlfDelay = Infinity;
const streamLines = (input) => readline.createInterface({ input, crlfDelay });
const fileLines = (file) => streamLines(fs.createReadStream(file));

const parseBashOutLine = (line) => {
    try {
        return JSON.parse(line);
    } catch (e) {
        console.error(e);
        return { cmd: CMD.noop };
    }
};

const cn = (...args) => {
    classes = [];
    for (const arg of args) {
        if ((typeof arg) === 'string') {
            classes.push(arg);
        } else {
            for (const className in arg) {
                if (arg[className]) {
                    classes.push(className);
                }
            }
        }
    }
    return classes.join(".");
};

class Entry {
    constructor(keyspec, desc) {
        const specParts = keyspec.split(':');
        const hasMod = specParts.length > 1;
        const modspec = hasMod ? specParts[0] : '';
        const rawFinspec = hasMod ? specParts[1] : specParts[0];
        const finspec = (rawFinspec).toLowerCase();
        const { baseMods, finkey } = NAME_OVERRIDES[finspec] || {
            baseMods: {}, finkey: finspec
        };
        for (const k of modspec) { baseMods[k] = true; }
        const modstring = (
            (baseMods.s ? 's' : '') +
            (baseMods.c ? 'c' : '') +
            (baseMods.a ? 'a' : '') +
            (baseMods.m ? 'm' : '')
        );
        this.modLookup = {};
        [...modstring].forEach((k) => { this.modLookup[k] = k; });
        this.keyspec = `${modstring}:${finkey}`;
        this.desc = desc;
        this.displayMods = modspec;
        this.displayKey = DISPLAY_NAMES[rawFinspec] || rawFinspec;
    }
}

class BackEntry extends Entry {
    constructor() {
        super('backspace');
    }

    handle(kmApp) {
        kmApp.activeMenuId = (
            kmApp.activeMenu.parentMenuId || kmApp.activeMenuId
        );
    }
}

class CmdEntry extends Entry {
    constructor(keyspec, desc, exe) {
        super(keyspec, desc);
        this.exe = exe;
    }

    handle(kmApp) {
        kmApp.spawnAndClose(this.exe);
    }

    get color() { return 'blue'; }
}

class SubEntry extends Entry {
    constructor(keyspec, desc, menuId) {
        super(keyspec, "+" + desc);
        this.menuId = menuId;
    }

    handle(kmApp) {
        kmApp.activeMenuId = this.menuId;
    }

    get color() { return 'yellow'; }
}

class Menu {
    constructor(kmApp, parentMenuId) {
        this.kmApp = kmApp;
        this.parentMenuId = parentMenuId;
        this.title = "";
        this.cols = [];
        this.entries = [];
        this.binds = {};
        const backEntry = new BackEntry();
        this.binds[backEntry.keyspec] = backEntry;

    }

    get parent() { return this.kmApp.menus[this.parentMenuId]; }

    get parentFullTitle() { return this.parent ? this.parent.fullTitle : []; }

    get fullTitle() {
        return [...this.parentFullTitle, this.title];
    }

    addEntry(entry) {
        this.entries.push(entry);
        this.binds[entry.keyspec] = entry;
    }

    addCmd(...args) { this.addEntry(new CmdEntry(...args)); }
    addSub(...args) { this.addEntry(new SubEntry(...args)); }
}

class KeyMenuApp {
    constructor(kmFiles) {
        this.kmFiles = kmFiles;
    }

    async run() {
        this.zkgProc = spawn('/home/dz/Projects/zkg/zkg');
        this.zkgProc.on('close', () => {
            if (!this.foundExe) {
                this.spawnAndClose();
                process.exit(1);
            }
        });
        // this.ztrProc = spawn('/home/dz/Projects/ztr/src-tauri/target/release/ztr');
        this.ztrProc = spawn('/home/dz/ztr');
        this.bashProc = spawn('bash');
        this.foundExe = false;
        this.isMenuBuildComplete = false;
        this.queuedZkgEvents = [];
        this.nextMenuId = 1;
        this.menus = {};
        this.rootMenuId = this.initNewMenu();
        this.buildingMenuId = this.rootMenuId;
        this.activeMenuId = this.rootMenuId;
        this.modstring = "";
        this.modLookup = {};
        this.processZkgOut();
        this.processBashErr();
        this.processBashOut();
        this.bashProc.stdin.write(`. ${__dirname}/km_lib\n`);
        for (const kmFile of this.kmFiles) {
            for await (const line of fileLines(kmFile)) {
                this.bashProc.stdin.write(line + '\n');
            }
        }
        this.bashProc.stdin.write('jq -c -n \'{cmd:"done",args:[]}\'\n');
    }

    get buildingMenu() { return this.menus[this.buildingMenuId]; }
    get activeMenu() { return this.menus[this.activeMenuId]; }

    initNewMenu(parentMenuId) {
        const id = this.nextMenuId++;
        const menu = new Menu(this, parentMenuId);
        this.menus[id] = menu;
        return id;
    }

    async processBashOut() {
        for await (const line of streamLines(this.bashProc.stdout)) {
            const action = parseBashOutLine(line);
            this.processAction(action);
        }
    }

    async processBashErr() {
        for await (const line of streamLines(this.bashProc.stderr)) {
            console.error('-- from bash subprocess --');
            console.error(line);
            console.error('--------------------------');
        }
    }

    processZkgEvent(zkgLine) {
        if (this.foundExe) { return; }
        const [keysymVal, eventType, activeModifiers] = zkgLine.split(' ');
        const modval = parseInt(activeModifiers);
        const isPress =  eventType === 'press';
        const ksNames = ks.fromKeysym(keysymVal).names;
        const isModPress = (mod) => (
            isPress && ksNames.some((name) => name.startsWith(mod))
        );
        const hasShift = (modval & 1) > 0 || isModPress('Shift');
        const hasCtrl = (modval & 4) > 0 || isModPress('Control');
        const hasAlt = (modval & 8) > 0 || isModPress('Alt');
        const hasMeta = (modval & 64) > 0 || isModPress('Super');
        this.modstring = (
            (hasShift ? 's' : '') +
            (hasCtrl ? 'c' : '') +
            (hasAlt ? 'a' : '') +
            (hasMeta ? 'm' : '')
        );
        this.modLookup = {};
        [...this.modstring].forEach((k) => { this.modLookup[k] = k; });
        const keyspecs = ksNames.map((name) => (
            `${this.modstring}:${name.toLowerCase()}`
        ));
        if (isPress) {
            for (const keyspec of keyspecs) {
                const entry = this.activeMenu.binds[keyspec];
                if (!entry) { continue; }
                entry.handle(this);
                break;
            }
        }
        this.render();
    }

    async processZkgOut() {
        for await (const line of streamLines(this.zkgProc.stdout)) {
            if (!this.isMenuBuildComplete) {
                this.queuedZkgEvents.push(line);
            } else {
                this.processZkgEvent(line);
            }
        }
    }

    get titleDom() {
        const pieces = [];
        for (let i=0; i < this.activeMenu.fullTitle.length; i++) {
            const isLast = i === (this.activeMenu.fullTitle.length - 1);
            const piece = this.activeMenu.fullTitle[i];
            pieces.push([
                `pre.${cn({
                    magenta: isLast,
                    bold: isLast,
                    bigger: isLast, 
                    grey: !isLast,
                })}`,
                piece
            ]);
            if (!isLast) {
                pieces.push(['pre.grey', ' > ']);
            }
        }
        return pieces;
    }

    get columnsDom() {
        const colsDom = [];
        const { cols, entries } = this.activeMenu;
        let colIndex = 0;
        const colEndInds = [0, ...cols];
        const nextColEndInd = () => (
            colEndInds[colIndex] || 0
        );
        const currColDom = () => colsDom[colsDom.length - 1];
        entries.forEach((entry, ind) => {
            if (ind === nextColEndInd()) {
                if (colIndex) { colsDom.push(['pre', '   ']); }
                colsDom.push([
                    'div.hbox.f1',
                    ['div.vbox.ta-right'],
                    ['div.vbox.ta-left'],
                ]);
                colIndex++;
            }
            const isPossible = [...this.modstring].every((k) => (
                entry.modLookup[k]
            ));
            const preKey = `pre.${cn({ dim: !isPossible }, 'cyan')}`;
            const preDesc = `pre.${cn({ dim: !isPossible }, entry.color)}`;
            const modsDom = [...entry.displayMods].map((modKey) => ([
                `span.${cn({ bold: isPossible && this.modLookup[modKey] })}`,
                modKey,
            ]));
            currColDom()[1].push([preKey, ...modsDom, ' ' + entry.displayKey]);
            currColDom()[2].push([preDesc, ["span.grey", "  "], entry.desc]);
        });
        return colsDom;
    }

    get appDom() {
        const isRoot = this.activeMenuId === this.rootMenuId;
        return [
            'div.vbox.ai-stretch',
            ['div.hbox.as-center.ai-center', ...this.titleDom],
            ['hr.mh0.border-grey.dim'],
            ['div.hbox.as-center', ...this.columnsDom],
            ['hr.mh0.border-grey.dim'],
            [
                'div.grey.hbox.ai-start.f1.jc-space-between.smaller', 
                ['pre', 'ESC to quit'],
                ...(isRoot ? [] : [
                    ['pre', '    '],
                    ['pre', '⌫ for prev menu']
                ])
            ]
        ];
    }

    async render() {
        if (this.foundExe) { return; }
        const payload = {
            cmd: 'render',
            args: [JSON.stringify(this.appDom)]
        };
        this.ztrProc.stdin.write(JSON.stringify(payload) + "\n");
    }

    processAction({ cmd, args }) {
        if (!CMD[cmd]) {
            console.error(`Unknown command [${cmd}]`);
            console.error('\t', cmd, ...args);
            return;
        }
        (({
            [CMD.noop]: () => {},
            [CMD.title]: (title) => {
                this.buildingMenu.title = title;
            },
            [CMD.col]: () => {
                this.buildingMenu.cols.push(this.buildingMenu.entries.length);
            },
            [CMD.cmd]: (keyspec, desc, exe) => {
                this.buildingMenu.addCmd(keyspec, desc, exe);
            },
            [CMD.sub_begin]: (keyspec, desc) => {
                const subId = this.initNewMenu(this.buildingMenuId);
                this.buildingMenu.addSub(keyspec, desc, subId);
                this.buildingMenuId = subId;
                this.buildingMenu.title = desc;
            },
            [CMD.sub_done]: () => {
                this.buildingMenuId = this.buildingMenu.parentMenuId;
            },
            [CMD.done]: () => {
                this.isMenuBuildComplete = true;
                this.render();
                for (const zkgLine of this.queuedZkgEvents) {
                    this.processZkgEvent(zkgLine);
                }
                this.queuedZkgEvents = [];
            },
        })[cmd])(...args);
    }

    spawnAndClose(exe) {
        this.foundExe = true;
        this.bashProc.kill();
        this.ztrProc.kill();
        this.zkgProc.stdin.write('\n');
        const proc = exe && spawn('bash', ['-lc', exe], { stdio: 'inherit' });
        proc && proc.on('close', (code) => process.exit(code));
    }
}

const main = async() => {
    const app = new KeyMenuApp(process.argv.slice(2));
    await app.run();
};

main();